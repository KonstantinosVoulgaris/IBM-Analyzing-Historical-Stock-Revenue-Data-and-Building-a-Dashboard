# Installing necessary packages
!pip install yfinance==0.2.38
!pip install pandas==2.2.2
!pip install nbformat

# Importing necessary libraries
import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings

# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)

def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing=.3)
    stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
                      height=900,
                      title=stock,
                      xaxis_rangeslider_visible=True)
    fig.show()

# QUESTION 1: Use yfinance to Extract Stock Data
# Reset the index, save, and display the first five rows of the tesla_data dataframe using the head function.
tesla = yf.Ticker('TSLA')
tesla_data = tesla.history(period="max")
tesla_data.reset_index(inplace=True)

# Display the first five rows of the tesla_data DataFrame
from IPython.display import display
display(tesla_data.head())

# QUESTION 2: Use Webscraping to Extract Tesla Revenue Data
# Display the last five rows of the tesla_revenue dataframe using the tail function. 
url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm'
html_data = requests.get(url).text

# Parse the HTML data using BeautifulSoup
soup = BeautifulSoup(html_data, 'html.parser')

# Find the table with Tesla Quarterly Revenue
table = soup.find_all("tbody")[1]

# Initialize a DataFrame for Tesla revenue
tesla_revenue = pd.DataFrame(columns=['Date', 'Revenue'])

# Loop through rows in the table
for row in table.find_all('tr'):
    cols = row.find_all('td')
    if len(cols) >= 2:  # Check if there are at least 2 columns
        date = cols[0].text
        revenue = cols[1].text
        
        # Create a DataFrame for the current row
        current_row = pd.DataFrame({'Date': [date], 'Revenue': [revenue]})
        
        # Concatenate to the main DataFrame
        tesla_revenue = pd.concat([tesla_revenue, current_row], ignore_index=True)

# Clean the Revenue data by removing commas and dollar signs
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(r',|\$', "", regex=True)

# Remove null or empty strings in the Revenue column
tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

# Display the last 5 rows of the tesla_revenue DataFrame
print(tesla_revenue.tail())

# QUESTION 3: Use yfinance to Extract Stock Data
# Reset the index, save, and display the first five rows of the gme_data dataframe using the head function. 
gamestop = yf.Ticker('GME')
gme_data = gamestop.history(period="max")
gme_data.reset_index(inplace=True)
display(gme_data.head())

# QUESTION 4: Use Webscraping to Extract GME Revenue Data
# Display the last five rows of the gme_revenue dataframe using the tail function.
url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html'
html_data_2 = requests.get(url).text
soup = BeautifulSoup(html_data_2, 'html.parser')
table = soup.find_all("tbody")[1]

gme_revenue = pd.DataFrame(columns=['Date', 'Revenue'])

for row in table.find_all('tr'):
    cols = row.find_all('td')
    if len(cols) >= 2:  # Check if there are at least 2 columns
        date = cols[0].text
        revenue = cols[1].text
        current_row = pd.DataFrame({'Date': [date], 'Revenue': [revenue]})
        gme_revenue = pd.concat([gme_revenue, current_row], ignore_index=True)

gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(r',|\$', "", regex=True)

gme_revenue.dropna(inplace=True)

gme_revenue = gme_revenue[gme_revenue['Revenue'] != ""]

# Display the last 5 rows of the gme_revenue DataFrame
print(gme_revenue.tail())

# QUESTION 5: Plot Tesla Stock Graph
# Use the make_graph function to graph the Tesla Stock Data, also provide a title for the graph. 
make_graph(tesla_data, tesla_revenue, 'Tesla Stock Graph')

# QUESTION 6: Plot GameStop Stock Graph
# Use the make_graph function to graph the GameStop Stock Data, also provide a title for the graph.
make_graph(gme_data, gme_revenue, 'GameStop Stock Graph')
